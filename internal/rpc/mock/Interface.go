// Code generated by mockery v2.39.1. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/mmfshirokan/chartService/internal/model"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// Interface is an autogenerated mock type for the Interface type
type Interface struct {
	mock.Mock
}

type Interface_Expecter struct {
	mock *mock.Mock
}

func (_m *Interface) EXPECT() *Interface_Expecter {
	return &Interface_Expecter{mock: &_m.Mock}
}

// Add provides a mock function with given fields: ctx, cand
func (_m *Interface) Add(ctx context.Context, cand model.Candle) error {
	ret := _m.Called(ctx, cand)

	if len(ret) == 0 {
		panic("no return value specified for Add")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.Candle) error); ok {
		r0 = rf(ctx, cand)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Interface_Add_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Add'
type Interface_Add_Call struct {
	*mock.Call
}

// Add is a helper method to define mock.On call
//   - ctx context.Context
//   - cand model.Candle
func (_e *Interface_Expecter) Add(ctx interface{}, cand interface{}) *Interface_Add_Call {
	return &Interface_Add_Call{Call: _e.mock.On("Add", ctx, cand)}
}

func (_c *Interface_Add_Call) Run(run func(ctx context.Context, cand model.Candle)) *Interface_Add_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.Candle))
	})
	return _c
}

func (_c *Interface_Add_Call) Return(_a0 error) *Interface_Add_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Interface_Add_Call) RunAndReturn(run func(context.Context, model.Candle) error) *Interface_Add_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, symbol, bidOrAsk
func (_m *Interface) Delete(ctx context.Context, symbol string, bidOrAsk model.PriceType) error {
	ret := _m.Called(ctx, symbol, bidOrAsk)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, model.PriceType) error); ok {
		r0 = rf(ctx, symbol, bidOrAsk)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Interface_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type Interface_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - symbol string
//   - bidOrAsk model.PriceType
func (_e *Interface_Expecter) Delete(ctx interface{}, symbol interface{}, bidOrAsk interface{}) *Interface_Delete_Call {
	return &Interface_Delete_Call{Call: _e.mock.On("Delete", ctx, symbol, bidOrAsk)}
}

func (_c *Interface_Delete_Call) Run(run func(ctx context.Context, symbol string, bidOrAsk model.PriceType)) *Interface_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(model.PriceType))
	})
	return _c
}

func (_c *Interface_Delete_Call) Return(_a0 error) *Interface_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Interface_Delete_Call) RunAndReturn(run func(context.Context, string, model.PriceType) error) *Interface_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, symbol, interval, bidOrAsk
func (_m *Interface) Get(ctx context.Context, symbol string, interval time.Duration, bidOrAsk model.PriceType) ([]model.Candle, error) {
	ret := _m.Called(ctx, symbol, interval, bidOrAsk)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 []model.Candle
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Duration, model.PriceType) ([]model.Candle, error)); ok {
		return rf(ctx, symbol, interval, bidOrAsk)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Duration, model.PriceType) []model.Candle); ok {
		r0 = rf(ctx, symbol, interval, bidOrAsk)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Candle)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, time.Duration, model.PriceType) error); ok {
		r1 = rf(ctx, symbol, interval, bidOrAsk)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Interface_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type Interface_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - symbol string
//   - interval time.Duration
//   - bidOrAsk model.PriceType
func (_e *Interface_Expecter) Get(ctx interface{}, symbol interface{}, interval interface{}, bidOrAsk interface{}) *Interface_Get_Call {
	return &Interface_Get_Call{Call: _e.mock.On("Get", ctx, symbol, interval, bidOrAsk)}
}

func (_c *Interface_Get_Call) Run(run func(ctx context.Context, symbol string, interval time.Duration, bidOrAsk model.PriceType)) *Interface_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(time.Duration), args[3].(model.PriceType))
	})
	return _c
}

func (_c *Interface_Get_Call) Return(_a0 []model.Candle, _a1 error) *Interface_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Interface_Get_Call) RunAndReturn(run func(context.Context, string, time.Duration, model.PriceType) ([]model.Candle, error)) *Interface_Get_Call {
	_c.Call.Return(run)
	return _c
}

// NewInterface creates a new instance of Interface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *Interface {
	mock := &Interface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
